# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'dc2.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QUrl, pyqtSignal
from PyQt5.QtGui import *
from PyQt5.QtMultimedia import QMediaPlayer, QMediaContent

import images_rc


class Ui_MainWindow_2(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1464, 864)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/prefix/rsc_check.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.check_op2 = QtWidgets.QCheckBox(self.centralwidget)
        self.check_op2.setEnabled(False)
        self.check_op2.setStyleSheet("font: 12pt \"宋体\";\n"
                                     "background-color: rgb(255, 255, 255);")
        self.check_op2.setCheckable(True)
        self.check_op2.setObjectName("check_op2")
        self.gridLayout.addWidget(self.check_op2, 13, 6, 1, 1)
        self.check_op1 = QtWidgets.QCheckBox(self.centralwidget)
        self.check_op1.setEnabled(False)
        self.check_op1.setStyleSheet("font: 12pt \"宋体\" bold;\n"
                                     "background-color: rgb(255, 255, 255);")
        self.check_op1.setCheckable(True)
        self.check_op1.setChecked(False)
        self.check_op1.setObjectName("check_op1")
        self.gridLayout.addWidget(self.check_op1, 12, 6, 1, 1)
        self.check_op3 = QtWidgets.QCheckBox(self.centralwidget)
        self.check_op3.setEnabled(False)
        self.check_op3.setStyleSheet("font: 12pt \"宋体\";\n"
                                     "background-color: rgb(255, 255, 255);")
        self.check_op3.setCheckable(True)
        self.check_op3.setObjectName("check_op3")
        self.gridLayout.addWidget(self.check_op3, 14, 6, 1, 1)
        self.check_op4 = QtWidgets.QCheckBox(self.centralwidget)
        self.check_op4.setEnabled(False)
        self.check_op4.setStyleSheet("font: 12pt \"宋体\";\n"
                                     "background-color: rgb(255, 255, 255);")
        self.check_op4.setCheckable(True)
        self.check_op4.setObjectName("check_op4")
        self.gridLayout.addWidget(self.check_op4, 15, 6, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setStyleSheet("border:1px solid blue;\n"
                                   "font: 15pt \"宋体\";")
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 0, 6, 1, 1)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setStyleSheet("border:1px solid blue;\n"
                                 "font: 15pt \"宋体\";")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 10, 6, 2, 1)
        self.wdt_player = QVideoWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.wdt_player.sizePolicy().hasHeightForWidth())
        self.wdt_player.setSizePolicy(sizePolicy)
        self.wdt_player.setStyleSheet("border:1px solid black;")
        self.wdt_player.setObjectName("wdt_player")
        self.gridLayout.addWidget(self.wdt_player, 0, 0, 16, 5)
        self.text_action = QtWidgets.QTextBrowser(self.centralwidget)
        font = QFont("宋体")
        font.setPointSize(12)
        self.text_action.document().setDefaultFont(font)
        color = QColor("red")
        self.text_action.setTextColor(color)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.text_action.sizePolicy().hasHeightForWidth())
        self.text_action.setSizePolicy(sizePolicy)
        self.text_action.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                       "border:1px solid black;")
        self.text_action.setReadOnly(True)
        self.text_action.setMarkdown("")
        self.text_action.setObjectName("text_action")
        self.gridLayout.addWidget(self.text_action, 1, 6, 9, 1)
        self.slider_dura = QtWidgets.QSlider(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.slider_dura.sizePolicy().hasHeightForWidth())
        self.slider_dura.setSizePolicy(sizePolicy)
        stylesheet = f"""
                QSlider::groove:horizontal {{
                    height: 12px;
                    left: 0px;
                    right: 0px;
                    border:0px;
                    border-radius:6px;
                    background:rgba(0,0,0,50);
                }}
                QSlider::handle:horizontal {{
                    width:  40px;
                    height: 40px;
                    margin-top: -20px;
                    margin-left: 0px;
                    margin-bottom: -20px;
                    margin-right: 0px;
                    border-image:url(":/prefix/rsc_slider.png");
                }}
                QSlider::sub-page:horizontal {{
                    background:rgba(80,166,234,1);
                }}
                """
        self.slider_dura.setStyleSheet(stylesheet)
        self.slider_dura.setOrientation(QtCore.Qt.Horizontal)
        self.slider_dura.setObjectName("slider_dura")
        self.gridLayout.addWidget(self.slider_dura, 16, 0, 2, 3)
        down_style = """
                QPushButton {
                    background-color: #4caf50;
                    font: 16pt \"宋体\";
                    color: white;
                    border-width: 2px;
                    border-style: outset;
                    border-radius: 10px;
                    padding: 5px 15px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #388e3c; 
                }
                QPushButton:pressed {
                    background-color: #2e7d32;
                }
            """
        self.btn_down2 = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(10)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_down2.sizePolicy().hasHeightForWidth())
        self.btn_down2.setSizePolicy(sizePolicy)
        self.btn_down2.setStyleSheet(down_style)
        self.btn_down2.setObjectName("btn_down2")
        self.gridLayout.addWidget(self.btn_down2, 18, 2, 1, 1)
        self.btn_down1 = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(5)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_down1.sizePolicy().hasHeightForWidth())
        self.btn_down1.setSizePolicy(sizePolicy)
        self.btn_down1.setStyleSheet(down_style)
        self.btn_down1.setObjectName("btn_down1")
        self.gridLayout.addWidget(self.btn_down1, 18, 0, 1, 2)
        playpause_style = """
            QPushButton {
                border: none; 
                background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                                stop: 0 #fdd835, stop: 1 #ffca28); 
                font: 12pt \"宋体\";
                padding: 5px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                                stop: 0 #ffd34e, stop: 1 #ffab00); 
            }
            QPushButton:pressed {
                background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                                stop: 0 #ffc107, stop: 1 #ffb300); 
            }
        """
        self.btn_play = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(2)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_play.sizePolicy().hasHeightForWidth())
        self.btn_play.setSizePolicy(sizePolicy)
        self.btn_play.setStyleSheet(playpause_style)
        self.btn_play.setObjectName("btn_play")
        self.gridLayout.addWidget(self.btn_play, 18, 3, 1, 1)
        self.lab_dura = QtWidgets.QLabel(self.centralwidget)
        self.lab_dura.setStyleSheet("border:1px solid black;\n"
                                    "border-color: blue;\n"
                                    "font: 20pt \"宋体\";\n"
                                    "border-radius: 10px;")
        self.lab_dura.setAlignment(QtCore.Qt.AlignCenter)
        self.lab_dura.setObjectName("lab_dura")
        self.gridLayout.addWidget(self.lab_dura, 16, 3, 2, 2)

        self.btn_pause = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(2)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_pause.sizePolicy().hasHeightForWidth())
        self.btn_pause.setSizePolicy(sizePolicy)
        self.btn_pause.setStyleSheet(playpause_style)
        self.btn_pause.setObjectName("btn_pause")
        self.gridLayout.addWidget(self.btn_pause, 18, 4, 1, 1)
        self.btn_exit = QtWidgets.QPushButton(self.centralwidget)
        self.btn_exit.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_exit.sizePolicy().hasHeightForWidth())
        self.btn_exit.setSizePolicy(sizePolicy)
        self.btn_exit.setMinimumSize(QtCore.QSize(0, 28))
        exit_style = """
                        QPushButton {
                            background-color: #e84a5f; /* 使用深红色背景，警示性且引人注意 */
                            color: white; /* 白色字体，与深红色背景形成高对比度，易于阅读 */
                            font: 16pt \"宋体\";
                            border-width: 2px;
                            border-style: outset;
                            border-radius: 10px;
                            padding: 5px 15px;
                        }
                        QPushButton:hover {
                            background-color: #cc3547; /* 鼠标悬停时，颜色稍浅以增强交互反馈 */
                        }
                        QPushButton:pressed {
                            background-color: #b02a37; /* 按下状态，颜色更深，模拟按压效果 */
                        }
                    """
        self.btn_exit.setStyleSheet(exit_style)
        self.btn_exit.setObjectName("btn_exit")
        self.gridLayout.addWidget(self.btn_exit, 16, 6, 3, 1)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "检测效果展示"))
        self.check_op2.setText(_translate("MainWindow", "骨骼点数据神经网络模型法"))
        self.check_op1.setText(_translate("MainWindow", "骨骼点坐标判断法"))
        self.check_op3.setText(_translate("MainWindow", "图片识别分类法"))
        self.check_op4.setText(_translate("MainWindow", "时序网络模型检测法"))
        self.label_2.setText(_translate("MainWindow", "异常行为检测情况："))
        self.label.setText(_translate("MainWindow", "当前处理的方法选择："))
        self.text_action.setHtml(_translate("MainWindow",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" "
                                            "\"http://www.w3.org/TR/REC-html40/strict.dtd\">\n "
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><style "
                                            "type=\"text/css\">\n "
                                            "p, li { white-space: pre-wrap; }\n"
                                            "</style></head><body style=\" font-family:\'SimSun\'; "
                                            "font-size:9.07563pt; font-weight:400; font-style:normal;\">\n "
                                            "<p style=\"-qt-paragraph-type:empty; margin-top:6px; margin-bottom:6px; "
                                            "margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; "
                                            "font-size:9.07563pt;\"><br /></p></body></html>"))
        self.text_action.setPlaceholderText(_translate("MainWindow", "这里显示上传的视频源经系统检测之后疑似出现异常行为的时间点..."))
        self.btn_down2.setText(_translate("MainWindow", "保存检测结果视频(不显示骨骼点框架版本)"))
        self.btn_down1.setText(_translate("MainWindow", "保存检测结果视频(显示骨骼点框架版本)"))
        self.btn_play.setText(_translate("MainWindow", "播放"))
        self.lab_dura.setText(_translate("MainWindow", "--/--"))
        self.btn_pause.setText(_translate("MainWindow", "暂停"))
        self.btn_exit.setText(_translate("MainWindow", "退出"))


from PyQt5.QtMultimediaWidgets import QVideoWidget
from PyQt5.QtMultimediaWidgets import QVideoWidget
from PyQt5.QtWidgets import *
import sys


class Check(QtWidgets.QMainWindow):
    def __init__(self, check1, check2, check3, check4, abnormal_actions, result_video_with_skeleton,
                 result_video_without_skeleton, fin_signal):
        super().__init__()
        self.ui = Ui_MainWindow_2()
        self.ui.setupUi(self)

        self.abnormal_actions = abnormal_actions
        self.result_video_with_skeleton = result_video_with_skeleton
        self.result_video_without_skeleton = result_video_without_skeleton
        self.finished = fin_signal

        if check1 is True:
            self.ui.check_op1.setChecked(True)
        else:
            self.ui.check_op1.setChecked(False)

        if check2 is True:
            self.ui.check_op2.setChecked(True)
        else:
            self.ui.check_op2.setChecked(False)

        if check3 is True:
            self.ui.check_op3.setChecked(True)
        else:
            self.ui.check_op3.setChecked(False)

        if check4 is True:
            self.ui.check_op4.setChecked(True)
        else:
            self.ui.check_op4.setChecked(False)

        self.fill_text_action()

        self.player = QMediaPlayer(None, QMediaPlayer.VideoSurface)
        self.player.setVideoOutput(self.ui.wdt_player)
        self.player.setMedia(QMediaContent(QUrl.fromLocalFile(self.result_video_with_skeleton)))
        self.player.play()
        self.player.pause()

        self.ui.btn_play.clicked.connect(self.play_video)
        self.ui.btn_pause.clicked.connect(self.pause_video)
        self.ui.btn_exit.clicked.connect(self.window_close)
        self.ui.btn_down1.clicked.connect(self.download1)
        self.ui.btn_down2.clicked.connect(self.download2)

        self.player.durationChanged.connect(self.get_duration)
        self.player.positionChanged.connect(self.get_position)
        self.ui.slider_dura.sliderMoved.connect(self.update_duration)

    # 根据abnormal_actions填充text_action
    def fill_text_action(self):
        self.ui.text_action.setHtml('')
        for content in self.abnormal_actions:
            self.ui.text_action.append('在时刻" {} "检测到考场中存在异常行为!'.format(content))

    def window_close(self):
        msg_result = QMessageBox.question(
            self,
            "确认消息",
            "您确定要退出当前界面吗？\n"
            "退出前请确保您已经成功获取和保存了相关资源!",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        if msg_result == QMessageBox.Yes:
            self.finished.emit()
            self.close()
            self.player.stop()  # 停止播放
            self.player.setMedia(QMediaContent())  # 清除媒体内容，尝试释放文件
            self.player.setVideoOutput(None)  # 断开视频输出连接

    def play_video(self):
        if self.player.state() != 1:
            self.player.play()

    def pause_video(self):
        if self.player.state() == 1:
            self.player.pause()

    def show_videotime(self, ms):
        min = int(ms / 60000)
        sec = int((ms - min * 60000) / 1000)
        self.ui.lab_dura.setText('{}:{}'.format(min, sec))

    def get_duration(self, d):
        self.ui.slider_dura.setRange(0, d)
        self.ui.slider_dura.setEnabled(True)
        self.show_videotime(0)

    def get_position(self, p):
        self.ui.slider_dura.setValue(p)
        self.show_videotime(p)

    def update_duration(self, v):
        self.player.setPosition(v)
        self.show_videotime(v)

    # 使用openCV进行保存视频
    def save_video(self, original_video_path):
        import cv2

        filename, _ = QFileDialog.getSaveFileName(self, '保存结果视频', 'output_video.avi',
                                                  'Video Files (*.avi);;All Files (*)',
                                                  options=QFileDialog.DontUseNativeDialog)

        if filename:
            try:
                # 使用OpenCV读取原始视频文件
                cap = cv2.VideoCapture(original_video_path)
                fps = cap.get(cv2.CAP_PROP_FPS)
                frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
                frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

                # 创建视频写入对象 格式根据用户选择的文件扩展名自动确定
                fourcc = cv2.VideoWriter_fourcc(*'XVID')
                out = cv2.VideoWriter(filename, fourcc, fps, (frame_width, frame_height))

                # 循环读取每一帧并写入新文件
                while True:
                    ret, frame = cap.read()
                    if not ret:
                        break
                    out.write(frame)

                cap.release()
                out.release()

                QMessageBox.information(self, '提示', f'视频文件"{filename}"成功保存！')
            except Exception as e:
                QMessageBox.critical(self, '错误', f'保存文件过程中发生错误: {str(e)}!')

    # 将本地的视频提供给用户进行保存
    def download1(self):
        # 显示骨骼点
        self.save_video(self.result_video_with_skeleton)

    def download2(self):
        # 不显示骨骼点
        self.save_video(self.result_video_without_skeleton)
