# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'dc1.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from qt_manual import *
from qt_progress import *
from qt_check import *
import sys
from PyQt5.QtWidgets import *
from PyQt5 import QtCore, QtGui, QtWidgets, Qt
from PyQt5.QtCore import QEvent, QUrl
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QFont
from PyQt5.QtMultimediaWidgets import QVideoWidget
from PyQt5.QtMultimedia import QMediaContent, QMediaPlayer
from PyQt5.QtWidgets import QFileDialog, QApplication
import images_rc
import cv2
import os

os.environ["TFHUB_CACHE_DIR"] = "./movenet"


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1259, 838)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/prefix/rsc_access.png"),
                       QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")

        # 增加使用手册
        self.menu_bar = QtWidgets.QMenuBar(self.centralwidget)
        self.menu_bar.setGeometry(QtCore.QRect(0, 0, 1248, 26))
        self.menu_bar.setObjectName("menu_bar")
        self.menu_help = QtWidgets.QMenu(self.menu_bar)
        self.menu_help.setObjectName("menu_help")
        MainWindow.setMenuBar(self.menu_bar)
        self.menu_bar.setStyleSheet("color: black;\n"
                                    "font: 10pt;\n")
        self.menu_bar.addAction(self.menu_help.menuAction())

        self.text_action = QtWidgets.QTextBrowser(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.text_action.sizePolicy().hasHeightForWidth())
        self.text_action.setSizePolicy(sizePolicy)
        self.text_action.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                       "border:1px solid black;")
        self.text_action.setReadOnly(True)
        self.text_action.setMarkdown("")
        self.text_action.setObjectName("text_action")
        self.gridLayout.addWidget(self.text_action, 1, 3, 2, 1)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setStyleSheet("border:1px solid blue;\n"
                                 "font: 15pt \"宋体\";")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 3, 3, 1, 1)
        self.slider_dura = QtWidgets.QSlider(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.slider_dura.sizePolicy().hasHeightForWidth())
        self.slider_dura.setSizePolicy(sizePolicy)
        # 设置slider的样式表进行美化
        stylesheet = f"""
                QSlider::groove:horizontal {{
                    height: 12px;
                    left: 0px;
                    right: 0px;
                    border:0px;
                    border-radius:6px;
                    background:rgba(0,0,0,50);
                }}
                QSlider::handle:horizontal {{
                    width:  40px;
                    height: 40px;
                    margin-top: -20px;
                    margin-left: 0px;
                    margin-bottom: -20px;
                    margin-right: 0px;
                    border-image:url(":/prefix/rsc_slider.png");
                }}
                QSlider::sub-page:horizontal {{
                    background:rgba(80,166,234,1);
                }}
                """
        self.slider_dura.setStyleSheet(stylesheet)
        self.slider_dura.setOrientation(QtCore.Qt.Horizontal)
        self.slider_dura.setObjectName("slider_dura")
        self.slider_dura.setMinimum(0)
        self.slider_dura.setMaximum(100)
        self.gridLayout.addWidget(self.slider_dura, 11, 0, 1, 1)
        playpause_style = """
            QPushButton {
                border: none; 
                background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                                stop: 0 #fdd835, stop: 1 #ffca28); 
                font: 12pt \"宋体\";
                padding: 5px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                                stop: 0 #ffd34e, stop: 1 #ffab00); 
            }
            QPushButton:pressed {
                background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                                stop: 0 #ffc107, stop: 1 #ffb300); 
            }
        """
        self.btn_pause = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.btn_pause.sizePolicy().hasHeightForWidth())
        self.btn_pause.setSizePolicy(sizePolicy)
        self.btn_pause.setStyleSheet(playpause_style)
        self.btn_pause.setObjectName("btn_pause")
        self.gridLayout.addWidget(self.btn_pause, 12, 2, 1, 1)
        self.btn_play = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.btn_play.sizePolicy().hasHeightForWidth())
        self.btn_play.setSizePolicy(sizePolicy)
        self.btn_play.setStyleSheet(playpause_style)
        self.btn_play.setObjectName("btn_play")
        self.gridLayout.addWidget(self.btn_play, 12, 1, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setStyleSheet("border:1px solid blue;\n"
                                   "font: 15pt \"宋体\";")
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 0, 3, 1, 1)
        self.check_op1 = QtWidgets.QCheckBox(self.centralwidget)
        self.check_op1.setStyleSheet("font: 12pt \"宋体\";\n"
                                     "background-color: rgb(255, 255, 255);")
        self.check_op1.setObjectName("check_op1")
        self.gridLayout.addWidget(self.check_op1, 4, 3, 1, 1)
        self.check_op4 = QtWidgets.QCheckBox(self.centralwidget)
        self.check_op4.setStyleSheet("font: 12pt \"宋体\";\n"
                                     "background-color: rgb(255, 255, 255);")
        self.check_op4.setObjectName("check_op4")
        self.gridLayout.addWidget(self.check_op4, 7, 3, 1, 1)
        self.btn_open_2 = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.btn_open_2.sizePolicy().hasHeightForWidth())
        self.btn_open_2.setSizePolicy(sizePolicy)
        check_style = """
            QPushButton {
                background-color: #0275d8;
                font: 16pt \"宋体\";
                color: white;
                border-radius: 10px; 
                padding: 10px 20px;
                font-weight: bold;
            }
            
            QPushButton:hover {
                background-color: #025aa5;
            }
            
            QPushButton:pressed {
                background-color: #014682;
                padding-top: 9px;
                padding-bottom: 11px;
            }
        """
        self.btn_open_2.setStyleSheet(check_style)
        self.btn_open_2.setObjectName("btn_open_2")
        self.gridLayout.addWidget(self.btn_open_2, 8, 3, 2, 1)
        self.check_op3 = QtWidgets.QCheckBox(self.centralwidget)
        self.check_op3.setStyleSheet("font: 12pt \"宋体\";\n"
                                     "background-color: rgb(255, 255, 255);")
        self.check_op3.setObjectName("check_op3")
        self.gridLayout.addWidget(self.check_op3, 6, 3, 1, 1)
        self.lab_dura = QtWidgets.QLabel(self.centralwidget)
        self.lab_dura.setStyleSheet("border:1px solid black;\n"
                                    "border-color: blue;\n"
                                    "font: 20pt \"宋体\";\n"
                                    "border-radius: 10px;")
        self.lab_dura.setAlignment(QtCore.Qt.AlignCenter)
        self.lab_dura.setObjectName("lab_dura")
        self.gridLayout.addWidget(self.lab_dura, 11, 1, 1, 2)
        self.check_op2 = QtWidgets.QCheckBox(self.centralwidget)
        self.check_op2.setStyleSheet("font: 12pt \"宋体\";\n"
                                     "background-color: rgb(255, 255, 255);")
        self.check_op2.setObjectName("check_op2")
        self.gridLayout.addWidget(self.check_op2, 5, 3, 1, 1)
        self.btn_open = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(10)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.btn_open.sizePolicy().hasHeightForWidth())
        self.btn_open.setSizePolicy(sizePolicy)
        open_style = """
                QPushButton {
                    background-color: #4caf50;
                    font: 16pt \"宋体\";
                    color: white;
                    border-width: 2px;
                    border-style: outset;
                    border-radius: 10px;
                    padding: 5px 15px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #388e3c; 
                }
                QPushButton:pressed {
                    background-color: #2e7d32;
                }
            """
        self.btn_open.setStyleSheet(open_style)
        self.btn_open.setObjectName("btn_open")
        self.gridLayout.addWidget(self.btn_open, 12, 0, 1, 1)
        self.wdt_player = QVideoWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.wdt_player.sizePolicy().hasHeightForWidth())
        self.wdt_player.setSizePolicy(sizePolicy)
        self.wdt_player.setStyleSheet("border:1px solid black;")
        self.wdt_player.setObjectName("wdt_player")
        self.gridLayout.addWidget(self.wdt_player, 0, 0, 10, 3)
        self.btn_exit = QtWidgets.QPushButton(self.centralwidget)
        self.btn_exit.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.btn_exit.sizePolicy().hasHeightForWidth())
        self.btn_exit.setSizePolicy(sizePolicy)
        self.btn_exit.setMinimumSize(QtCore.QSize(0, 28))
        exit_style = """
                QPushButton {
                    background-color: #e84a5f; 
                    color: white;
                    font: 16pt \"宋体\";
                    border-width: 2px;
                    border-style: outset;
                    border-radius: 10px;
                    padding: 5px 15px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #cc3547;
                }
                QPushButton:pressed {
                    background-color: #b02a37;
                }
            """
        self.btn_exit.setStyleSheet(exit_style)
        self.btn_exit.setObjectName("btn_exit")
        self.gridLayout.addWidget(self.btn_exit, 11, 3, 2, 1)
        self.btn_open.raise_()
        self.text_action.raise_()
        self.lab_dura.raise_()
        self.btn_pause.raise_()
        self.btn_open_2.raise_()
        self.btn_play.raise_()
        self.check_op1.raise_()
        self.check_op2.raise_()
        self.btn_exit.raise_()
        self.check_op4.raise_()
        self.label_2.raise_()
        self.label.raise_()
        self.check_op3.raise_()
        self.slider_dura.raise_()
        self.wdt_player.raise_()
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "考场异常行为检测系统"))
        self.text_action.setHtml(_translate("MainWindow",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" "
                                            "\"http://www.w3.org/TR/REC-html40/strict.dtd\">\n "
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><style "
                                            "type=\"text/css\">\n "
                                            "p, li { white-space: pre-wrap; }\n"
                                            "</style></head><body style=\" font-family:\'SimSun\'; "
                                            "font-size:9.07563pt; font-weight:400; font-style:normal;\">\n "
                                            "<p style=\"-qt-paragraph-type:empty; margin-top:6px; margin-bottom:6px; "
                                            "margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; "
                                            "font-size:9.07563pt;\"><br /></p></body></html>"))
        self.text_action.setPlaceholderText(_translate(
            "MainWindow", "这里显示上传的视频源经系统检测之后疑似出现异常行为的时间点..."))
        self.label.setText(_translate("MainWindow", "处理方法选择："))
        self.btn_pause.setText(_translate("MainWindow", "暂停"))
        self.btn_play.setText(_translate("MainWindow", "播放"))
        self.label_2.setText(_translate("MainWindow", "异常行为检测情况："))
        self.check_op1.setText(_translate("MainWindow", "骨骼点坐标判断法"))
        self.check_op4.setText(_translate("MainWindow", "时序网络模型检测法"))
        self.btn_open_2.setText(_translate("MainWindow", "检测异常行为"))
        self.check_op3.setText(_translate("MainWindow", "图片识别分类法"))
        self.lab_dura.setText(_translate("MainWindow", "--/--"))
        self.check_op2.setText(_translate("MainWindow", "骨骼点数据神经网络模型法"))
        self.btn_open.setText(_translate("MainWindow", "选择视频源"))
        self.btn_exit.setText(_translate("MainWindow", "退出"))
        self.menu_help.setTitle(_translate("MainWindow", "帮助"))


class Index(QtWidgets.QMainWindow):
    finished = pyqtSignal()

    def __init__(self):
        super(Index, self).__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        # 保存上传的视频文件路径
        # 并且会被统一处理为avi文件
        # 只有当video_path非空时才可以进行训练处理
        self.video_path = ''

        # 播放器
        self.player = QMediaPlayer(None, QMediaPlayer.VideoSurface)
        self.player.setVideoOutput(self.ui.wdt_player)

        # 按钮
        self.ui.btn_open.clicked.connect(self.open_video)
        self.ui.btn_open_2.clicked.connect(self.start_check)
        self.ui.btn_play.clicked.connect(self.play_video)
        self.ui.btn_pause.clicked.connect(self.pause_video)
        self.ui.btn_exit.clicked.connect(self.window_close)

        # 视频播放进度控制
        self.player.durationChanged.connect(self.get_duration)
        self.player.positionChanged.connect(self.get_position)
        self.ui.slider_dura.sliderMoved.connect(self.update_duration)

        # 添加一个打开使用手册的动作
        self.open_manual_action = QAction('用户使用手册', self)
        self.open_manual_action.setStatusTip('打开用户使用手册')
        self.open_manual_action.triggered.connect(self.open_manual)

        self.ui.menu_help.addAction(self.open_manual_action)

        self.show_videotime(0)

        # 初始化一个消息提示窗口
        QMessageBox.information(self,
                                '提示',
                                '欢迎使用本考场异常行为检测系统!\n'
                                '为保证系统可以正常流畅运行,请务必在使用前阅读菜单栏帮助中的用户使用手册!\n')

        # 设置字典映射
        # 当用户重复进行检测时给出提示并且快速加载
        self.dict = {}
        # 记录当前运行所有产生的视频路径
        # 退出前进行删除
        self.out_videos = []
        self.worker = None
        self.new_window = None

    def get_status_str(self, check1, check2, check3, check4, video_path):
        str_temp = ''
        if check1:
            str_temp += '1'
        else:
            str_temp += '0'

        if check2:
            str_temp += '1'
        else:
            str_temp += '0'

        if check3:
            str_temp += '1'
        else:
            str_temp += '0'

        if check4:
            str_temp += '1'
        else:
            str_temp += '0'

        str_ret = video_path + '_' + str_temp
        return str_ret

    def get_status_from_str(self, str_p):
        str_temp = str_p[-4:]
        list_ret = []
        for ch in str_temp:
            if ch == '0':
                list_ret.append(False)
            else:
                list_ret.append(True)
        return list_ret

    def start_check(self):
        check1 = self.ui.check_op1.isChecked()
        check2 = self.ui.check_op2.isChecked()
        check3 = self.ui.check_op3.isChecked()
        check4 = self.ui.check_op4.isChecked()
        video_path = self.video_path
        if video_path == '':
            QMessageBox.warning(self, '警告', '无法找到合适的视频源,无法进行处理!!!')
        elif check1 is False and check2 is False and check3 is False and check4 is False:
            QMessageBox.warning(self, '警告', '请至少勾选一种检测方式!!!')
        else:
            cur_key = self.get_status_str(
                check1, check2, check3, check4, video_path)
            if cur_key in self.dict:
                # 这次处理先前已经处理过 直接跳过进度条界面
                msg_result = QMessageBox.question(
                    self,
                    "确认消息",
                    "当前的视频和处理方法的组会已经进行处理过,\n"
                    "是否仍然进入处理界面？",
                    QMessageBox.Yes | QMessageBox.No,
                    QMessageBox.No
                )
                if msg_result == QMessageBox.Yes:
                    self.finished.connect(self.window_back)
                    self.window_side()
                    list_p = self.get_status_from_str(cur_key)
                    parameter1 = self.dict[cur_key][0]
                    parameter2 = self.dict[cur_key][1]
                    parameter3 = self.dict[cur_key][2]
                    self.new_window = Check(list_p[0], list_p[0], list_p[0], list_p[0], parameter1, parameter2,
                                            parameter3, self.finished)
                    self.new_window.show()
            else:
                self.worker = Progressbar(check1, check2, check3, check4, video_path, cur_key, self.dict,
                                          self.out_videos)
                self.worker.finished.connect(self.window_back)
                self.window_side()
                self.worker.worker_thread.started.connect(
                    self.worker.data_worker.process_data)
                self.worker.worker_thread.start()
                self.worker.show()

    # 保留为了模拟模块窗口的信号设计
    def window_side(self):
        # 禁止对检测按钮的交互
        self.ui.btn_open_2.setEnabled(False)

    def window_back(self):
        self.ui.btn_open_2.setEnabled(True)

    # 判读上传的文件是否时视频文件 防止程序崩溃
    def is_video_file(self):
        filename = self.video_path
        # 使用简单的文件扩展名方式 可以处理大多数情况
        # 仍可以添加其他视频格式扩展名
        supported_extensions = ['.mp4', '.avi', '.mov',
                                '.wmv', '.mkv', '.flv', '.mpg', '.mpeg', '.webm']
        return os.path.splitext(filename)[1].lower() in supported_extensions

    def is_video_avi(self):
        filename = self.video_path
        supported_extensions = ['.avi']
        return os.path.splitext(filename)[1].lower() in supported_extensions

    # 将用户上传的视频文件转化为avi格式统一进行处理
    def transform_video_1(self):
        # 使用openCV按帧转换avi格式 多次调用会出现崩溃情况且效率极低
        # FAIL...
        cap = cv2.VideoCapture(self.video_path)
        if not cap.isOpened():
            # 读取视频失败
            QMessageBox.warning(self, '警告', '读取上传的视频源失败,请检查文件完好性或格式等信息！')
        else:
            ret, frame = cap.read()
            if not ret:
                QMessageBox.warning(self, '警告', '读取上传的视频源失败,请检查文件完好性或格式等信息！')
            else:
                # 进行视频文件格式转换
                fps = cap.get(cv2.CAP_PROP_FPS)
                frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
                frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
                # 使用 XVID 编解码器
                fourcc = cv2.VideoWriter_fourcc(*'XVID')
                # 保存转换后的视频文件格式
                output_file = "video.avi"
                out = cv2.VideoWriter(
                    output_file, fourcc, fps, (frame_width, frame_height))

                while cap.isOpened():
                    ret, frame = cap.read()
                    if not ret:
                        break
                    out.write(frame)

                # 成功转换后保存路径到类属性中
                self.video_path = output_file
                out.release()

        # 最后释放资源
        cap.release()

    def transform_video_2(self):
        # try shutil and os模块 无法改变mp4文件的实质编码格式
        # FAIL...
        import shutil
        src_file = self.video_path
        dst_file = os.path.join(os.getcwd(), os.path.basename(src_file))
        shutil.copy2(src_file, dst_file)
        base_name, ext_name = os.path.splitext(dst_file)
        new_file_path = dst_file.replace(ext_name, '.avi')
        if not os.path.exists(new_file_path):
            os.rename(dst_file, new_file_path)
            self.video_path = new_file_path
        return

    def transform_video_3(self):
        # 使用ffmpeg命令进行转换 但是需要系统安装并且配置ffmpeg
        # FAIL...
        import subprocess
        input_file = self.video_path
        output_file = 'out_video.avi'
        command = f'ffmpeg -i "{input_file}" -c:v libx264 -preset veryfast -crf 22 -c:a copy "{output_file}"'
        try:
            subprocess.run(command, shell=True, check=True)
            self.video_path = output_file
        except subprocess.CalledProcessError as e:
            QMessageBox.warning(self, '警告', 'convert_video执行过程中出错!')
            print(f'Conversion failed:{e}')

    def window_close(self):
        msg_result = QMessageBox.question(
            self,
            "确认消息",
            "您确定要退出整个系统程序吗？\n"
            "这将终止所有正在执行的流程并关闭所有窗口!",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        if msg_result == QMessageBox.Yes:
            # 强行终止正在执行的线程
            if self.worker is not None and self.worker.worker_thread.isRunning():
                self.worker.stop_signal.emit()
                self.worker.worker_thread.quit()
                self.worker.finished.emit()
                self.worker.close()
            # 强行关闭第二个窗口
            if self.worker is not None and self.worker.new_window is not None and self.worker.new_window.isVisible():
                self.worker.new_window.player.stop()  # 停止播放
                self.worker.new_window.player.setMedia(
                    QMediaContent())  # 清除媒体内容，尝试释放文件
                self.worker.new_window.player.setVideoOutput(None)  # 断开视频输出连接
                self.worker.new_window.close()
            if self.new_window is not None and self.new_window.isVisible():
                self.new_window.player.stop()  # 停止播放
                self.new_window.player.setMedia(
                    QMediaContent())  # 清除媒体内容，尝试释放文件
                self.new_window.player.setVideoOutput(None)  # 断开视频输出连接
                self.new_window.close()
            self.close()

            # time.sleep(1)  # 短暂延迟，给操作系统一点时间来释放文件

            # 尝试删除文件
            try:
                for video_file in self.out_videos:
                    if os.path.exists(video_file):
                        os.remove(video_file)
            except PermissionError as e:
                print(f"删除文件时出错: {e}")

    def open_video(self):
        self.video_path = QFileDialog.getOpenFileUrl()[0]
        self.video_path = self.video_path.toLocalFile()
        if self.is_video_file():
            # 目前采用的解决方式是系统本地安装一个解码器
            self.player.setMedia(QMediaContent(
                QUrl.fromLocalFile(self.video_path)))
            self.player.play()
            self.player.pause()
        else:
            QMessageBox.warning(self, '警告', '上传的文件并非视频文件,请检查文件格式重新上传!')
            self.video_path = ''

    def play_video(self):
        if self.player.state() != 1:
            self.player.play()

    def pause_video(self):
        if self.player.state() == 1:
            self.player.pause()

    def show_videotime(self, ms):
        min = int(ms / 60000)
        sec = int((ms - min * 60000) / 1000)
        self.ui.lab_dura.setText('{}:{}'.format(min, sec))

    def get_duration(self, d):
        self.ui.slider_dura.setRange(0, d)
        self.ui.slider_dura.setEnabled(True)
        self.show_videotime(0)

    def get_position(self, p):
        self.ui.slider_dura.setValue(p)
        self.show_videotime(p)

    def update_duration(self, v):
        self.player.setPosition(v)
        self.show_videotime(v)

    def open_manual(self):
        # 这里实现打开用户手册的逻辑
        self.manual_window = Manual()
        self.manual_window.show()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    my_mainwindow = Index()
    my_mainwindow.show()
    out_videos = my_mainwindow.out_videos
    app.exec_()
    sys.exit()
